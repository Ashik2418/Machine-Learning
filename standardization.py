# -*- coding: utf-8 -*-
"""Standardization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-oSZFKMpBSzteOhhpTefNS4B87qRAjvt
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/Social_Network_Ads (2).csv")
df.head()

"""# Train Test split"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(df.drop('Purchased',axis=1),df['Purchased'],test_size=0.3,random_state=0)
x_train.shape, x_test.shape

"""# **Standard Scalar**"""

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(x_train)

x_train_scaled = scaler.transform(x_train)
x_test_scaled = scaler.transform(x_test)

scaler.mean_

x_train

x_train_scaled

x_train_scaled = pd.DataFrame(x_train_scaled,columns=x_train.columns)
x_test_scaled = pd.DataFrame(x_test_scaled,columns=x_test.columns)

np.round(x_train.describe(),1)

np.round(x_train_scaled.describe(),1)

"""# **Effect of scaling**"""

fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(12, 5))

ax1.scatter(x_train['Age'], x_train['EstimatedSalary'])
ax1.set_title('Before Scaling')

ax2.scatter(x_train_scaled['Age'], x_train_scaled['EstimatedSalary'],color = 'blue')
ax2.set_title('After Scaling')
ax1.set_ylabel('EstimatedSalary')
plt.show()

"""# **Probability Density Function**"""

fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(12,5))

ax1.set_title('Before Scaling')
sns.kdeplot(x_train['Age'], ax=ax1)
sns.kdeplot(x_train['EstimatedSalary'], ax=ax1)

ax2.set_title('After Scaling')
sns.kdeplot(x_train_scaled['Age'], ax=ax2)
sns.kdeplot(x_train_scaled['EstimatedSalary'], ax=ax2)
plt.show()

"""# **Comparison of Distribution**"""

fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(12,5))
#before Scaling
ax1.set_title('EstimatedSalary Distribution Before Scaling')
sns.kdeplot(x_train['EstimatedSalary'], ax=ax1)
#after Scaling
ax2.set_title('EstimatedSalary Distribution After Scaling')
sns.kdeplot(x_train_scaled['EstimatedSalary'], ax=ax2)
plt.show()

fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(12,5))
#before Scaling
ax1.set_title('Age Distribution Before Scaling')
sns.kdeplot(x_train['Age'], ax=ax1)
#after Scaling
ax2.set_title('Age Distribution After Scaling')
sns.kdeplot(x_train_scaled['Age'], ax=ax2)
plt.show()

"""# **Why scaling is important using Algorithm**"""

from sklearn.linear_model import LogisticRegression
lr = LogisticRegression()
lr.scaled = LogisticRegression()
lr.fit(x_train,y_train)
lr.scaled.fit(x_train_scaled,y_train)
LogisticRegression()
y_pred = lr.predict(x_test)
y_pred_scaled = lr.scaled.predict(x_test_scaled)

from sklearn.metrics import accuracy_score
print("Actual",accuracy_score(y_test,y_pred))
print("Scaled",accuracy_score(y_test,y_pred_scaled))

from sklearn.tree import DecisionTreeClassifier
dt = DecisionTreeClassifier()
dt.scaled = DecisionTreeClassifier()
dt.fit(x_train,y_train)
dt.scaled.fit(x_train_scaled,y_train)
DecisionTreeClassifier
y_pred = dt.predict(x_test)
y_pred_scaled = dt.scaled.predict(x_test_scaled)

from sklearn.metrics import accuracy_score
print("Actual",accuracy_score(y_test,y_pred))
print("Scaled",accuracy_score(y_test,y_pred_scaled))